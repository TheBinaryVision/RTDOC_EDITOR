{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { parseColor, getColorAreaGradient, normalizeColor } from '@zag-js/color-utils';\nimport { raf, getInitialFocus, dispatchInputValueEvent, disableTextSelection, trackPointerMove, trackFormControl, setElementValue, getRelativePoint, queryAll, dataAttr, visuallyHiddenStyle, getEventStep, getEventKey, isLeftClick, isModifierKey, getEventPoint, query } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { tryCatch, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\"root\", \"label\", \"control\", \"trigger\", \"positioner\", \"content\", \"area\", \"areaThumb\", \"valueText\", \"areaBackground\", \"channelSlider\", \"channelSliderLabel\", \"channelSliderTrack\", \"channelSliderThumb\", \"channelSliderValueText\", \"channelInput\", \"transparencyGrid\", \"swatchGroup\", \"swatchTrigger\", \"swatchIndicator\", \"swatch\", \"eyeDropperTrigger\", \"formatTrigger\", \"formatSelect\"]);\nvar parts = anatomy.build();\nvar getRootId = ctx => ctx.ids?.root ?? `color-picker:${ctx.id}`;\nvar getLabelId = ctx => ctx.ids?.label ?? `color-picker:${ctx.id}:label`;\nvar getHiddenInputId = ctx => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`;\nvar getControlId = ctx => ctx.ids?.control ?? `color-picker:${ctx.id}:control`;\nvar getTriggerId = ctx => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`;\nvar getContentId = ctx => ctx.ids?.content ?? `color-picker:${ctx.id}:content`;\nvar getPositionerId = ctx => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`;\nvar getFormatSelectId = ctx => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`;\nvar getAreaId = ctx => ctx.ids?.area ?? `color-picker:${ctx.id}:area`;\nvar getAreaGradientId = ctx => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`;\nvar getAreaThumbId = ctx => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`;\nvar getChannelSliderTrackId = (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`;\nvar getChannelSliderThumbId = (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`;\nvar getContentEl = ctx => ctx.getById(getContentId(ctx));\nvar getAreaThumbEl = ctx => ctx.getById(getAreaThumbId(ctx));\nvar getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));\nvar getFormatSelectEl = ctx => ctx.getById(getFormatSelectId(ctx));\nvar getHiddenInputEl = ctx => ctx.getById(getHiddenInputId(ctx));\nvar getAreaEl = ctx => ctx.getById(getAreaId(ctx));\nvar getAreaValueFromPoint = (ctx, point) => {\n  const areaEl = getAreaEl(ctx);\n  if (!areaEl) return;\n  const {\n    percent\n  } = getRelativePoint(point, areaEl);\n  return percent;\n};\nvar getControlEl = ctx => ctx.getById(getControlId(ctx));\nvar getTriggerEl = ctx => ctx.getById(getTriggerId(ctx));\nvar getPositionerEl = ctx => ctx.getById(getPositionerId(ctx));\nvar getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));\nvar getChannelSliderValueFromPoint = (ctx, point, channel) => {\n  const trackEl = getChannelSliderTrackEl(ctx, channel);\n  if (!trackEl) return;\n  const {\n    percent\n  } = getRelativePoint(point, trackEl);\n  return percent;\n};\nvar getChannelInputEls = ctx => {\n  return [...queryAll(getContentEl(ctx), \"input[data-channel]\"), ...queryAll(getControlEl(ctx), \"input[data-channel]\")];\n};\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\":\n      {\n        return color;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = props2 => {\n  const {\n    channel,\n    value,\n    dir,\n    orientation\n  } = props2;\n  const bgDirection = getSliderBackgroundDirection(orientation, dir);\n  const {\n    minValue,\n    maxValue\n  } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n      }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    send,\n    prop,\n    computed,\n    state,\n    scope\n  } = service;\n  const value = context.get(\"value\");\n  const format = context.get(\"format\");\n  const areaValue = computed(\"areaValue\");\n  const valueAsString = computed(\"valueAsString\");\n  const disabled = computed(\"disabled\");\n  const interactive = computed(\"interactive\");\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = props2 => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props2.xChannel ?? channels[1],\n      yChannel: props2.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = context.get(\"currentPlacement\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props2) {\n    const color = normalizeColor(props2.value).toFormat(context.get(\"format\"));\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props2.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    setOpen(nextOpen) {\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({\n        type: nextOpen ? \"OPEN\" : \"CLOSE\"\n      });\n    },\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: normalizeColor(value2),\n        src: \"set-color\"\n      });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-channel\"\n      });\n    },\n    format: context.get(\"format\"),\n    setFormat(format2) {\n      const formatValue = value.toFormat(format2);\n      send({\n        type: \"VALUE.SET\",\n        value: formatValue,\n        src: \"set-format\"\n      });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-alpha\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        id: getLabelId(scope),\n        htmlFor: getHiddenInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(getControlEl(scope), \"[data-channel=hex]\");\n          inputEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: getControlId(scope),\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: getTriggerId(scope),\n        dir: prop(\"dir\"),\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": getContentId(scope),\n        \"aria-labelledby\": getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.CLICK\"\n          });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.BLUR\"\n          });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: getPositionerId(scope),\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: getContentId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: -1,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: getAreaId(scope),\n        role: \"group\",\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = {\n            xChannel,\n            yChannel\n          };\n          send({\n            type: \"AREA.POINTER_DOWN\",\n            point,\n            channel,\n            id: \"area\"\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaGradientStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: getAreaGradientId(scope),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const channel = {\n        xChannel,\n        yChannel\n      };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      const color = areaValue.withChannelValue(\"alpha\", 1).toString(\"css\");\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: getAreaThumbId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${xPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          \"--color\": color,\n          background: color\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"AREA.FOCUS\",\n            id: \"area\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"AREA.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"AREA.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"AREA.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"AREA.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"AREA.PAGE_UP\",\n                channel,\n                step\n              });\n            },\n            PageDown() {\n              send({\n                type: \"AREA.PAGE_DOWN\",\n                channel,\n                step\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props2 = {}) {\n      const {\n        size = \"12px\"\n      } = props2;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({\n            type: \"CHANNEL_SLIDER.POINTER_DOWN\",\n            channel,\n            format: format2,\n            point,\n            id: channel,\n            orientation\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: getChannelSliderTrackId(scope, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: prop(\"dir\"),\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props2) {\n      const {\n        channel\n      } = props2;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = getChannelSliderThumbId(scope, channel);\n          scope.getById(thumbId)?.focus({\n            preventScroll: true\n          });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props2) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props2.channel\n      });\n    },\n    getChannelSliderThumbProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const placementStyles = orientation === \"horizontal\" ? {\n        left: `${offset * 100}%`,\n        top: \"50%\"\n      } : {\n        top: `${offset * 100}%`,\n        left: \"50%\"\n      };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: getChannelSliderThumbId(scope, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_SLIDER.FOCUS\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_UP\",\n                channel\n              });\n            },\n            PageDown() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_DOWN\",\n                channel\n              });\n            },\n            Home() {\n              send({\n                type: \"CHANNEL_SLIDER.HOME\",\n                channel\n              });\n            },\n            End() {\n              send({\n                type: \"CHANNEL_SLIDER.END\",\n                channel\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props2) {\n      const {\n        channel\n      } = props2;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: prop(\"dir\"),\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        readOnly: prop(\"readOnly\"),\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_INPUT.FOCUS\",\n            channel\n          });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({\n            type: \"CHANNEL_INPUT.BLUR\",\n            channel,\n            value: value2,\n            isTextField\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({\n              type: \"CHANNEL_INPUT.CHANGE\",\n              channel,\n              value: value2,\n              isTextField\n            });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: prop(\"name\"),\n        tabIndex: -1,\n        readOnly: prop(\"readOnly\"),\n        required: prop(\"required\"),\n        id: getHiddenInputId(scope),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: prop(\"dir\"),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"EYEDROPPER.CLICK\"\n          });\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({\n            type: \"SWATCH_TRIGGER.CLICK\",\n            value: swatchState.value\n          });\n        },\n        style: {\n          \"--color\": swatchState.valueAsString,\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: prop(\"dir\"),\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props2) {\n      const {\n        respectAlpha = true\n      } = props2;\n      const swatchState = getSwatchTriggerState(props2);\n      const color = swatchState.value.toString(respectAlpha ? \"css\" : \"hex\");\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          \"--color\": color,\n          position: \"relative\",\n          background: color\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(format);\n          send({\n            type: \"FORMAT.SET\",\n            format: nextFormat,\n            src: \"format-trigger\"\n          });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: prop(\"dir\"),\n        defaultValue: prop(\"format\"),\n        disabled,\n        onChange(event) {\n          const format2 = assertFormat(event.currentTarget.value);\n          send({\n            type: \"FORMAT.SET\",\n            format: format2,\n            src: \"format-select\"\n          });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = colorString => {\n  return parseColor(colorString);\n};\n\n// src/color-picker.machine.ts\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      dir: \"ltr\",\n      defaultValue: parse(\"#000000\"),\n      defaultFormat: \"rgba\",\n      openAutoFocus: true,\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        ...props2.positioning\n      }\n    };\n  },\n  initialState({\n    prop\n  }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\");\n    return open ? \"open\" : \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual(a, b) {\n          return a.toString(\"css\") === b?.toString(\"css\");\n        },\n        hash(a) {\n          return a.toString(\"css\");\n        },\n        onChange(value) {\n          const ctx = getContext();\n          const valueAsString = value.toString(ctx.get(\"format\"));\n          prop(\"onValueChange\")?.({\n            value,\n            valueAsString\n          });\n        }\n      })),\n      format: bindable(() => ({\n        defaultValue: prop(\"defaultFormat\"),\n        value: prop(\"format\"),\n        onChange(format) {\n          prop(\"onFormatChange\")?.({\n            format\n          });\n        }\n      })),\n      activeId: bindable(() => ({\n        defaultValue: null\n      })),\n      activeChannel: bindable(() => ({\n        defaultValue: null\n      })),\n      activeOrientation: bindable(() => ({\n        defaultValue: null\n      })),\n      fieldsetDisabled: bindable(() => ({\n        defaultValue: false\n      })),\n      restoreFocus: bindable(() => ({\n        defaultValue: true\n      })),\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      }))\n    };\n  },\n  computed: {\n    rtl: ({\n      prop\n    }) => prop(\"dir\") === \"rtl\",\n    disabled: ({\n      prop,\n      context\n    }) => !!prop(\"disabled\") || context.get(\"fieldsetDisabled\"),\n    interactive: ({\n      prop\n    }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    valueAsString: ({\n      context\n    }) => context.get(\"value\").toString(context.get(\"format\")),\n    areaValue: ({\n      context\n    }) => {\n      const format = context.get(\"format\").startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n      return context.get(\"value\").toFormat(format);\n    }\n  },\n  effects: [\"trackFormControl\"],\n  watch({\n    prop,\n    context,\n    action,\n    track\n  }) {\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncInputElements\", \"dispatchChangeEvent\"]);\n    });\n    track([() => context.get(\"format\")], () => {\n      action([\"syncFormatSelectElement\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"FORMAT.SET\": {\n      actions: [\"setFormat\"]\n    },\n    \"CHANNEL_INPUT.CHANGE\": {\n      actions: [\"setChannelColorFromInput\"]\n    },\n    \"EYEDROPPER.CLICK\": {\n      actions: [\"openEyeDropper\"]\n    },\n    \"SWATCH_TRIGGER.CLICK\": {\n      actions: [\"setValue\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"closed\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setActiveChannel\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"closed\", \"focused\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"TRIGGER.BLUR\": {\n          target: \"idle\"\n        }\n      }\n    },\n    open: {\n      tags: [\"open\"],\n      effects: [\"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"AREA.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"AREA.ARROW_LEFT\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_RIGHT\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_UP\": {\n          actions: [\"incrementAreaYChannel\"]\n        },\n        \"AREA.ARROW_DOWN\": {\n          actions: [\"decrementAreaYChannel\"]\n        },\n        \"AREA.PAGE_UP\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.PAGE_DOWN\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_LEFT\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.HOME\": {\n          actions: [\"setChannelToMin\"]\n        },\n        \"CHANNEL_SLIDER.END\": {\n          actions: [\"setChannelToMax\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"SWATCH_TRIGGER.CLICK\": [{\n          guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n          actions: [\"setValue\", \"invokeOnClose\"]\n        }, {\n          guard: \"closeOnSelect\",\n          target: \"focused\",\n          actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          actions: [\"setValue\"]\n        }]\n      }\n    },\n    \"open:dragging\": {\n      tags: [\"open\"],\n      exit: [\"clearActiveChannel\"],\n      effects: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"AREA.POINTER_MOVE\": {\n          actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_MOVE\": {\n          actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      closeOnSelect: ({\n        prop\n      }) => !!prop(\"closeOnSelect\"),\n      isOpenControlled: ({\n        prop\n      }) => prop(\"open\") != null,\n      shouldRestoreFocus: ({\n        context\n      }) => !!context.get(\"restoreFocus\")\n    },\n    effects: {\n      trackPositioning({\n        context,\n        prop,\n        scope\n      }) {\n        if (!context.get(\"currentPlacement\")) {\n          context.set(\"currentPlacement\", prop(\"positioning\")?.placement);\n        }\n        const anchorEl = getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      trackDismissableElement({\n        context,\n        scope,\n        prop,\n        send\n      }) {\n        const getContentEl2 = () => getContentEl(scope);\n        return trackDismissableElement(getContentEl2, {\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onInteractOutside(event) {\n            prop(\"onInteractOutside\")?.(event);\n            if (event.defaultPrevented) return;\n            context.set(\"restoreFocus\", !(event.detail.focusable || event.detail.contextmenu));\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onDismiss() {\n            send({\n              type: \"INTERACT_OUTSIDE\"\n            });\n          }\n        });\n      },\n      trackFormControl({\n        context,\n        scope,\n        send\n      }) {\n        const inputEl = getHiddenInputEl(scope);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            send({\n              type: \"VALUE.SET\",\n              value: context.initial(\"value\"),\n              src: \"form.reset\"\n            });\n          }\n        });\n      },\n      trackPointerMove({\n        context,\n        scope,\n        event,\n        send\n      }) {\n        return trackPointerMove(scope.getDoc(), {\n          onPointerMove({\n            point\n          }) {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({\n              type,\n              point,\n              format: event.format\n            });\n          },\n          onPointerUp() {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({\n              type\n            });\n          }\n        });\n      },\n      disableTextSelection({\n        scope\n      }) {\n        return disableTextSelection({\n          doc: scope.getDoc(),\n          target: getContentEl(scope)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper({\n        scope,\n        context\n      }) {\n        const win = scope.getWin();\n        const isSupported = \"EyeDropper\" in win;\n        if (!isSupported) return;\n        const picker = new win.EyeDropper();\n        picker.open().then(({\n          sRGBHex\n        }) => {\n          const format = context.get(\"value\").getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          context.set(\"value\", color);\n        }).catch(() => void 0);\n      },\n      setActiveChannel({\n        context,\n        event\n      }) {\n        context.set(\"activeId\", event.id);\n        if (event.channel) context.set(\"activeChannel\", event.channel);\n        if (event.orientation) context.set(\"activeOrientation\", event.orientation);\n      },\n      clearActiveChannel({\n        context\n      }) {\n        context.set(\"activeChannel\", null);\n        context.set(\"activeId\", null);\n        context.set(\"activeOrientation\", null);\n      },\n      setAreaColorFromPoint({\n        context,\n        event,\n        computed,\n        scope\n      }) {\n        const v = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const {\n          xChannel,\n          yChannel\n        } = event.channel || context.get(\"activeChannel\");\n        const percent = getAreaValueFromPoint(scope, event.point);\n        if (!percent) return;\n        const xValue = v.getChannelPercentValue(xChannel, percent.x);\n        const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        context.set(\"value\", color);\n      },\n      setChannelColorFromPoint({\n        context,\n        event,\n        computed,\n        scope\n      }) {\n        const channel = event.channel || context.get(\"activeId\");\n        const normalizedValue = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const percent = getChannelSliderValueFromPoint(scope, event.point, channel);\n        if (!percent) return;\n        const orientation = context.get(\"activeOrientation\") || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        context.set(\"value\", color);\n      },\n      setValue({\n        context,\n        event\n      }) {\n        context.set(\"value\", event.value);\n      },\n      setFormat({\n        context,\n        event\n      }) {\n        context.set(\"format\", event.format);\n      },\n      dispatchChangeEvent({\n        scope,\n        computed\n      }) {\n        dispatchInputValueEvent(getHiddenInputEl(scope), {\n          value: computed(\"valueAsString\")\n        });\n      },\n      syncInputElements({\n        context,\n        scope\n      }) {\n        syncChannelInputs(scope, context.get(\"value\"));\n      },\n      invokeOnChangeEnd({\n        context,\n        prop,\n        computed\n      }) {\n        prop(\"onValueChangeEnd\")?.({\n          value: context.get(\"value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      setChannelColorFromInput({\n        context,\n        event,\n        scope\n      }) {\n        const {\n          channel,\n          isTextField,\n          value\n        } = event;\n        const currentAlpha = context.get(\"value\").getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = context.get(\"value\").withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(() => parse(value).withChannelValue(\"alpha\", currentAlpha), () => context.get(\"value\"));\n        } else {\n          const current = context.get(\"value\").toFormat(context.get(\"format\"));\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        syncChannelInputs(scope, context.get(\"value\"), color);\n        context.set(\"value\", color);\n      },\n      incrementChannel({\n        context,\n        event\n      }) {\n        const color = context.get(\"value\").incrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementChannel({\n        context,\n        event\n      }) {\n        const color = context.get(\"value\").decrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaXChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaXChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaYChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaYChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      setChannelToMax({\n        context,\n        event\n      }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.maxValue);\n        context.set(\"value\", color);\n      },\n      setChannelToMin({\n        context,\n        event\n      }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.minValue);\n        context.set(\"value\", color);\n      },\n      focusAreaThumb({\n        scope\n      }) {\n        raf(() => {\n          getAreaThumbEl(scope)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusChannelThumb({\n        event,\n        scope\n      }) {\n        raf(() => {\n          getChannelSliderThumbEl(scope, event.channel)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setInitialFocus({\n        prop,\n        scope\n      }) {\n        if (!prop(\"openAutoFocus\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\")\n          });\n          element?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setReturnFocus({\n        scope\n      }) {\n        raf(() => {\n          getTriggerEl(scope)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      syncFormatSelectElement({\n        context,\n        scope\n      }) {\n        syncFormatSelect(scope, context.get(\"format\"));\n      },\n      invokeOnOpen({\n        prop\n      }) {\n        prop(\"onOpenChange\")?.({\n          open: true\n        });\n      },\n      invokeOnClose({\n        prop\n      }) {\n        prop(\"onOpenChange\")?.({\n          open: false\n        });\n      },\n      toggleVisibility({\n        prop,\n        event,\n        send\n      }) {\n        send({\n          type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: event\n        });\n      }\n    }\n  }\n});\nfunction syncChannelInputs(scope, currentValue, nextValue) {\n  const channelInputEls = getChannelInputEls(scope);\n  raf(() => {\n    channelInputEls.forEach(inputEl => {\n      const channel = inputEl.dataset.channel;\n      setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));\n    });\n  });\n}\nfunction syncFormatSelect(scope, format) {\n  const selectEl = getFormatSelectEl(scope);\n  if (!selectEl) return;\n  raf(() => setElementValue(selectEl, format));\n}\nvar props = createProps()([\"closeOnSelect\", \"dir\", \"disabled\", \"format\", \"defaultFormat\", \"getRootNode\", \"id\", \"ids\", \"initialFocusEl\", \"name\", \"positioning\", \"onFocusOutside\", \"onFormatChange\", \"onInteractOutside\", \"onOpenChange\", \"onPointerDownOutside\", \"onValueChange\", \"onValueChangeEnd\", \"defaultOpen\", \"open\", \"positioning\", \"required\", \"readOnly\", \"value\", \"defaultValue\", \"invalid\", \"openAutoFocus\"]);\nvar splitProps = createSplitProps(props);\nvar areaProps = createProps()([\"xChannel\", \"yChannel\"]);\nvar splitAreaProps = createSplitProps(areaProps);\nvar channelProps = createProps()([\"channel\", \"orientation\"]);\nvar splitChannelProps = createSplitProps(channelProps);\nvar swatchTriggerProps = createProps()([\"value\", \"disabled\"]);\nvar splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);\nvar swatchProps = createProps()([\"value\", \"respectAlpha\"]);\nvar splitSwatchProps = createSplitProps(swatchProps);\nvar transparencyGridProps = createProps()([\"size\"]);\nvar splitTransparencyGridProps = createSplitProps(transparencyGridProps);\nexport { anatomy, areaProps, channelProps, connect, machine, parse, props, splitAreaProps, splitChannelProps, splitProps, splitSwatchProps, splitSwatchTriggerProps, splitTransparencyGridProps, swatchProps, swatchTriggerProps, transparencyGridProps };","map":null,"metadata":{},"sourceType":"module"}