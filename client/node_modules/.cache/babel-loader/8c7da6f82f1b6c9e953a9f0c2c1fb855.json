{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { dataAttr } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/toggle.anatomy.ts\nvar anatomy = createAnatomy(\"toggle\", [\"root\", \"indicator\"]);\nvar parts = anatomy.build();\nfunction connect(service, normalize) {\n  const {\n    context,\n    prop,\n    send\n  } = service;\n  const pressed = context.get(\"pressed\");\n  return {\n    pressed,\n    disabled: !!prop(\"disabled\"),\n    setPressed(value) {\n      send({\n        type: \"PRESS.SET\",\n        value\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        type: \"button\",\n        ...parts.root.attrs,\n        disabled: prop(\"disabled\"),\n        \"aria-pressed\": pressed,\n        \"data-state\": pressed ? \"on\" : \"off\",\n        \"data-pressed\": dataAttr(pressed),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (prop(\"disabled\")) return;\n          send({\n            type: \"PRESS.TOGGLE\"\n          });\n        }\n      });\n    },\n    getIndicatorProps() {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-pressed\": dataAttr(pressed),\n        \"data-state\": pressed ? \"on\" : \"off\"\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      defaultPressed: false,\n      ...props2\n    };\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      pressed: bindable(() => ({\n        value: prop(\"pressed\"),\n        defaultValue: prop(\"defaultPressed\"),\n        onChange(value) {\n          prop(\"onPressedChange\")?.(value);\n        }\n      }))\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  on: {\n    \"PRESS.TOGGLE\": {\n      actions: [\"togglePressed\"]\n    },\n    \"PRESS.SET\": {\n      actions: [\"setPressed\"]\n    }\n  },\n  states: {\n    idle: {}\n  },\n  implementations: {\n    actions: {\n      togglePressed({\n        context\n      }) {\n        context.set(\"pressed\", !context.get(\"pressed\"));\n      },\n      setPressed({\n        context,\n        event\n      }) {\n        context.set(\"pressed\", event.value);\n      }\n    }\n  }\n});\nvar props = createProps()([\"defaultPressed\", \"pressed\", \"onPressedChange\", \"disabled\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module"}