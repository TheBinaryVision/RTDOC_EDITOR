{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Pagination, usePaginationContext } from '@ark-ui/react/pagination';\nimport { forwardRef, useMemo } from 'react';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { EllipsisIcon } from '../icons.js';\nimport { Box } from '../box/box.js';\nimport { For } from '../for/for.js';\nimport { IconButton } from '../button/icon-button.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: usePaginationStyles,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"pagination\"\n});\nconst PaginationRootProvider = withProvider(Pagination.RootProvider, \"root\", {\n  forwardAsChild: true,\n  forwardProps: [\"page\"]\n});\nconst PaginationRoot = withProvider(Pagination.Root, \"root\", {\n  forwardAsChild: true,\n  forwardProps: [\"page\"]\n});\nconst PaginationPropsProvider = PropsProvider;\nconst PaginationEllipsis = withContext(Pagination.Ellipsis, \"ellipsis\", {\n  forwardAsChild: true\n});\nconst PaginationItem = withContext(Pagination.Item, \"item\", {\n  forwardAsChild: true\n});\nconst PaginationNextTrigger = withContext(Pagination.NextTrigger, \"nextTrigger\", {\n  forwardAsChild: true\n});\nconst PaginationPrevTrigger = withContext(Pagination.PrevTrigger, \"prevTrigger\", {\n  forwardAsChild: true\n});\nconst PaginationContext = Pagination.Context;\nconst PaginationPageText = forwardRef(function PaginationPageText2(props, ref) {\n  const {\n    format = \"compact\",\n    ...rest\n  } = props;\n  const {\n    page,\n    totalPages,\n    pageRange,\n    count\n  } = usePaginationContext();\n  const content = useMemo(() => {\n    if (format === \"short\") return `${page} / ${totalPages}`;\n    if (format === \"compact\") return `${page} of ${totalPages}`;\n    return `${pageRange.start + 1} - ${Math.min(pageRange.end, count)} of ${count}`;\n  }, [format, page, totalPages, pageRange, count]);\n  return /* @__PURE__ */jsx(Box, {\n    fontWeight: \"medium\",\n    ref,\n    ...rest,\n    children: content\n  });\n});\nconst PaginationItems = props => {\n  const {\n    pages\n  } = usePaginationContext();\n  const {\n    render,\n    ellipsis,\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(For, {\n    each: pages,\n    children: (page, index) => {\n      if (page.type === \"ellipsis\") {\n        return /* @__PURE__ */jsx(PaginationEllipsis, {\n          asChild: true,\n          index,\n          ...rest,\n          children: ellipsis || /* @__PURE__ */jsx(IconButton, {\n            as: \"span\",\n            children: /* @__PURE__ */jsx(EllipsisIcon, {})\n          })\n        }, index);\n      }\n      return /* @__PURE__ */jsx(PaginationItem, {\n        asChild: true,\n        type: \"page\",\n        value: page.value,\n        ...rest,\n        children: render(page)\n      }, index);\n    }\n  });\n};\nexport { PaginationContext, PaginationEllipsis, PaginationItem, PaginationItems, PaginationNextTrigger, PaginationPageText, PaginationPrevTrigger, PaginationPropsProvider, PaginationRoot, PaginationRootProvider, usePaginationStyles };","map":null,"metadata":{},"sourceType":"module"}