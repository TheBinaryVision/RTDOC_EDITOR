{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { raf, getInitialFocus, proxyTabFocus, dataAttr, isSafari } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { ariaHidden } from '@zag-js/aria-hidden';\nimport { createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { trapFocus } from '@zag-js/focus-trap';\nimport { preventBodyScroll } from '@zag-js/remove-scroll';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/popover.anatomy.ts\nvar anatomy = createAnatomy(\"popover\").parts(\"arrow\", \"arrowTip\", \"anchor\", \"trigger\", \"indicator\", \"positioner\", \"content\", \"title\", \"description\", \"closeTrigger\");\nvar parts = anatomy.build();\nvar getAnchorId = scope => scope.ids?.anchor ?? `popover:${scope.id}:anchor`;\nvar getTriggerId = scope => scope.ids?.trigger ?? `popover:${scope.id}:trigger`;\nvar getContentId = scope => scope.ids?.content ?? `popover:${scope.id}:content`;\nvar getPositionerId = scope => scope.ids?.positioner ?? `popover:${scope.id}:popper`;\nvar getArrowId = scope => scope.ids?.arrow ?? `popover:${scope.id}:arrow`;\nvar getTitleId = scope => scope.ids?.title ?? `popover:${scope.id}:title`;\nvar getDescriptionId = scope => scope.ids?.description ?? `popover:${scope.id}:desc`;\nvar getCloseTriggerId = scope => scope.ids?.closeTrigger ?? `popover:${scope.id}:close`;\nvar getAnchorEl = scope => scope.getById(getAnchorId(scope));\nvar getTriggerEl = scope => scope.getById(getTriggerId(scope));\nvar getContentEl = scope => scope.getById(getContentId(scope));\nvar getPositionerEl = scope => scope.getById(getPositionerId(scope));\nvar getTitleEl = scope => scope.getById(getTitleId(scope));\nvar getDescriptionEl = scope => scope.getById(getDescriptionId(scope));\n\n// src/popover.connect.ts\nfunction connect(service, normalize) {\n  const {\n    state,\n    context,\n    send,\n    computed,\n    prop,\n    scope\n  } = service;\n  const open = state.matches(\"open\");\n  const currentPlacement = context.get(\"currentPlacement\");\n  const portalled = computed(\"currentPortalled\");\n  const rendered = context.get(\"renderedElements\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: currentPlacement\n  });\n  return {\n    portalled,\n    open,\n    setOpen(nextOpen) {\n      const open2 = state.matches(\"open\");\n      if (open2 === nextOpen) return;\n      send({\n        type: nextOpen ? \"OPEN\" : \"CLOSE\"\n      });\n    },\n    reposition(options = {}) {\n      send({\n        type: \"POSITIONING.SET\",\n        options\n      });\n    },\n    getArrowProps() {\n      return normalize.element({\n        id: getArrowId(scope),\n        ...parts.arrow.attrs,\n        dir: prop(\"dir\"),\n        style: popperStyles.arrow\n      });\n    },\n    getArrowTipProps() {\n      return normalize.element({\n        ...parts.arrowTip.attrs,\n        dir: prop(\"dir\"),\n        style: popperStyles.arrowTip\n      });\n    },\n    getAnchorProps() {\n      return normalize.element({\n        ...parts.anchor.attrs,\n        dir: prop(\"dir\"),\n        id: getAnchorId(scope)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"data-placement\": currentPlacement,\n        id: getTriggerId(scope),\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-controls\": getContentId(scope),\n        onPointerDown(event) {\n          if (isSafari()) {\n            event.currentTarget.focus();\n          }\n        },\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"TOGGLE\"\n          });\n        },\n        onBlur(event) {\n          send({\n            type: \"TRIGGER_BLUR\",\n            target: event.relatedTarget\n          });\n        }\n      });\n    },\n    getIndicatorProps() {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": open ? \"open\" : \"closed\"\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        id: getPositionerId(scope),\n        ...parts.positioner.attrs,\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: prop(\"dir\"),\n        id: getContentId(scope),\n        tabIndex: -1,\n        role: \"dialog\",\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-expanded\": dataAttr(open),\n        \"aria-labelledby\": rendered.title ? getTitleId(scope) : void 0,\n        \"aria-describedby\": rendered.description ? getDescriptionId(scope) : void 0,\n        \"data-placement\": currentPlacement\n      });\n    },\n    getTitleProps() {\n      return normalize.element({\n        ...parts.title.attrs,\n        id: getTitleId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getDescriptionProps() {\n      return normalize.element({\n        ...parts.description.attrs,\n        id: getDescriptionId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getCloseTriggerProps() {\n      return normalize.button({\n        ...parts.closeTrigger.attrs,\n        dir: prop(\"dir\"),\n        id: getCloseTriggerId(scope),\n        type: \"button\",\n        \"aria-label\": \"close\",\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          event.stopPropagation();\n          send({\n            type: \"CLOSE\"\n          });\n        }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      closeOnInteractOutside: true,\n      closeOnEscape: true,\n      autoFocus: true,\n      modal: false,\n      portalled: true,\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        ...props2.positioning\n      }\n    };\n  },\n  initialState({\n    prop\n  }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\");\n    return open ? \"open\" : \"closed\";\n  },\n  context({\n    bindable\n  }) {\n    return {\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      })),\n      renderedElements: bindable(() => ({\n        defaultValue: {\n          title: true,\n          description: true\n        }\n      }))\n    };\n  },\n  computed: {\n    currentPortalled: ({\n      prop\n    }) => !!prop(\"modal\") || !!prop(\"portalled\")\n  },\n  watch({\n    track,\n    prop,\n    action\n  }) {\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  entry: [\"checkRenderedElements\"],\n  states: {\n    closed: {\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        TOGGLE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }]\n      }\n    },\n    open: {\n      effects: [\"trapFocus\", \"preventScroll\", \"hideContentBelow\", \"trackPositioning\", \"trackDismissableElement\", \"proxyTabFocus\"],\n      on: {\n        \"CONTROLLED.CLOSE\": {\n          target: \"closed\",\n          actions: [\"setFinalFocus\"]\n        },\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"closed\",\n          actions: [\"invokeOnClose\", \"setFinalFocus\"]\n        }],\n        TOGGLE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"closed\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"POSITIONING.SET\": {\n          actions: [\"reposition\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isOpenControlled: ({\n        prop\n      }) => prop(\"open\") != void 0\n    },\n    effects: {\n      trackPositioning({\n        context,\n        prop,\n        scope\n      }) {\n        context.set(\"currentPlacement\", prop(\"positioning\").placement);\n        const anchorEl = getAnchorEl(scope) ?? getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      trackDismissableElement({\n        send,\n        prop,\n        scope\n      }) {\n        const getContentEl2 = () => getContentEl(scope);\n        let restoreFocus = true;\n        return trackDismissableElement(getContentEl2, {\n          pointerBlocking: prop(\"modal\"),\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onEscapeKeyDown(event) {\n            prop(\"onEscapeKeyDown\")?.(event);\n            if (prop(\"closeOnEscape\")) return;\n            event.preventDefault();\n          },\n          onInteractOutside(event) {\n            prop(\"onInteractOutside\")?.(event);\n            if (event.defaultPrevented) return;\n            restoreFocus = !(event.detail.focusable || event.detail.contextmenu);\n            if (!prop(\"closeOnInteractOutside\")) {\n              event.preventDefault();\n            }\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          persistentElements: prop(\"persistentElements\"),\n          onDismiss() {\n            send({\n              type: \"CLOSE\",\n              src: \"interact-outside\",\n              restoreFocus\n            });\n          }\n        });\n      },\n      proxyTabFocus({\n        prop,\n        scope\n      }) {\n        if (prop(\"modal\") || !prop(\"portalled\")) return;\n        const getContentEl2 = () => getContentEl(scope);\n        return proxyTabFocus(getContentEl2, {\n          triggerElement: getTriggerEl(scope),\n          defer: true,\n          onFocus(el) {\n            el.focus({\n              preventScroll: true\n            });\n          }\n        });\n      },\n      hideContentBelow({\n        prop,\n        scope\n      }) {\n        if (!prop(\"modal\")) return;\n        const getElements = () => [getContentEl(scope), getTriggerEl(scope)];\n        return ariaHidden(getElements, {\n          defer: true\n        });\n      },\n      preventScroll({\n        prop,\n        scope\n      }) {\n        if (!prop(\"modal\")) return;\n        return preventBodyScroll(scope.getDoc());\n      },\n      trapFocus({\n        prop,\n        scope\n      }) {\n        if (!prop(\"modal\")) return;\n        const contentEl = () => getContentEl(scope);\n        return trapFocus(contentEl, {\n          initialFocus: () => getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\"),\n            enabled: prop(\"autoFocus\")\n          })\n        });\n      }\n    },\n    actions: {\n      reposition({\n        event,\n        prop,\n        scope,\n        context\n      }) {\n        const anchorEl = getAnchorEl(scope) ?? getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          ...event.options,\n          defer: true,\n          listeners: false,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      checkRenderedElements({\n        context,\n        scope\n      }) {\n        raf(() => {\n          Object.assign(context.get(\"renderedElements\"), {\n            title: !!getTitleEl(scope),\n            description: !!getDescriptionEl(scope)\n          });\n        });\n      },\n      setInitialFocus({\n        prop,\n        scope\n      }) {\n        if (prop(\"modal\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\"),\n            enabled: prop(\"autoFocus\")\n          });\n          element?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setFinalFocus({\n        event,\n        scope\n      }) {\n        const restoreFocus = event.restoreFocus ?? event.previousEvent?.restoreFocus;\n        if (restoreFocus != null && !restoreFocus) return;\n        raf(() => {\n          const element = getTriggerEl(scope);\n          element?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      invokeOnOpen({\n        prop\n      }) {\n        prop(\"onOpenChange\")?.({\n          open: true\n        });\n      },\n      invokeOnClose({\n        prop\n      }) {\n        prop(\"onOpenChange\")?.({\n          open: false\n        });\n      },\n      toggleVisibility({\n        event,\n        send,\n        prop\n      }) {\n        send({\n          type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: event\n        });\n      }\n    }\n  }\n});\nvar props = createProps()([\"autoFocus\", \"closeOnEscape\", \"closeOnInteractOutside\", \"dir\", \"getRootNode\", \"id\", \"ids\", \"initialFocusEl\", \"modal\", \"onEscapeKeyDown\", \"onFocusOutside\", \"onInteractOutside\", \"onOpenChange\", \"onPointerDownOutside\", \"defaultOpen\", \"open\", \"persistentElements\", \"portalled\", \"positioning\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module"}