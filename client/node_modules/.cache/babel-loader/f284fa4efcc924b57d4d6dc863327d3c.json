{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { observeAttributes, observeChildren } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/avatar.anatomy.ts\nvar anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\");\nvar parts = anatomy.build();\n\n// src/avatar.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `avatar:${ctx.id}`;\nvar getImageId = ctx => ctx.ids?.image ?? `avatar:${ctx.id}:image`;\nvar getFallbackId = ctx => ctx.ids?.fallback ?? `avatar:${ctx.id}:fallback`;\nvar getRootEl = ctx => ctx.getById(getRootId(ctx));\nvar getImageEl = ctx => ctx.getById(getImageId(ctx));\n\n// src/avatar.connect.ts\nfunction connect(service, normalize) {\n  const {\n    state,\n    send,\n    prop,\n    scope\n  } = service;\n  const loaded = state.matches(\"loaded\");\n  return {\n    loaded,\n    setSrc(src) {\n      const img = getImageEl(scope);\n      img?.setAttribute(\"src\", src);\n    },\n    setLoaded() {\n      send({\n        type: \"img.loaded\",\n        src: \"api\"\n      });\n    },\n    setError() {\n      send({\n        type: \"img.error\",\n        src: \"api\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope)\n      });\n    },\n    getImageProps() {\n      return normalize.img({\n        ...parts.image.attrs,\n        hidden: !loaded,\n        dir: prop(\"dir\"),\n        id: getImageId(scope),\n        \"data-state\": loaded ? \"visible\" : \"hidden\",\n        onLoad() {\n          send({\n            type: \"img.loaded\",\n            src: \"element\"\n          });\n        },\n        onError() {\n          send({\n            type: \"img.error\",\n            src: \"element\"\n          });\n        }\n      });\n    },\n    getFallbackProps() {\n      return normalize.element({\n        ...parts.fallback.attrs,\n        dir: prop(\"dir\"),\n        id: getFallbackId(scope),\n        hidden: loaded,\n        \"data-state\": loaded ? \"hidden\" : \"visible\"\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  initialState() {\n    return \"loading\";\n  },\n  effects: [\"trackImageRemoval\", \"trackSrcChange\"],\n  on: {\n    \"src.change\": {\n      target: \"loading\"\n    },\n    \"img.unmount\": {\n      target: \"error\"\n    }\n  },\n  states: {\n    loading: {\n      entry: [\"checkImageStatus\"],\n      on: {\n        \"img.loaded\": {\n          target: \"loaded\",\n          actions: [\"invokeOnLoad\"]\n        },\n        \"img.error\": {\n          target: \"error\",\n          actions: [\"invokeOnError\"]\n        }\n      }\n    },\n    error: {\n      on: {\n        \"img.loaded\": {\n          target: \"loaded\",\n          actions: [\"invokeOnLoad\"]\n        }\n      }\n    },\n    loaded: {\n      on: {\n        \"img.error\": {\n          target: \"error\",\n          actions: [\"invokeOnError\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      invokeOnLoad({\n        prop\n      }) {\n        prop(\"onStatusChange\")?.({\n          status: \"loaded\"\n        });\n      },\n      invokeOnError({\n        prop\n      }) {\n        prop(\"onStatusChange\")?.({\n          status: \"error\"\n        });\n      },\n      checkImageStatus({\n        send,\n        scope\n      }) {\n        const imageEl = getImageEl(scope);\n        if (!imageEl?.complete) return;\n        const type = hasLoaded(imageEl) ? \"img.loaded\" : \"img.error\";\n        send({\n          type,\n          src: \"ssr\"\n        });\n      }\n    },\n    effects: {\n      trackImageRemoval({\n        send,\n        scope\n      }) {\n        const rootEl = getRootEl(scope);\n        return observeChildren(rootEl, {\n          callback(records) {\n            const removedNodes = Array.from(records[0].removedNodes);\n            const removed = removedNodes.find(node => node.nodeType === Node.ELEMENT_NODE && node.matches(\"[data-scope=avatar][data-part=image]\"));\n            if (removed) {\n              send({\n                type: \"img.unmount\"\n              });\n            }\n          }\n        });\n      },\n      trackSrcChange({\n        send,\n        scope\n      }) {\n        const imageEl = getImageEl(scope);\n        return observeAttributes(imageEl, {\n          attributes: [\"src\", \"srcset\"],\n          callback() {\n            send({\n              type: \"src.change\"\n            });\n          }\n        });\n      }\n    }\n  }\n});\nfunction hasLoaded(image) {\n  return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;\n}\nvar props = createProps()([\"dir\", \"id\", \"ids\", \"onStatusChange\", \"getRootNode\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module"}