{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { raf, trackPointerMove, addDomEvent, queryAll, getTabbables, dataAttr, getEventKey, ariaAttr, getEventTarget, isFocusable } from '@zag-js/dom-query';\nimport { clampValue, prevIndex, nextIndex, add, remove, uniq, isObject, ensureProps, createSplitProps, throttle } from '@zag-js/utils';\nimport { createMachine } from '@zag-js/core';\nimport { getScrollSnapPositions, findSnapPoint } from '@zag-js/scroll-snap';\nimport { createProps } from '@zag-js/types';\n\n// src/carousel.anatomy.ts\nvar anatomy = createAnatomy(\"carousel\").parts(\"root\", \"itemGroup\", \"item\", \"control\", \"nextTrigger\", \"prevTrigger\", \"indicatorGroup\", \"indicator\", \"autoplayTrigger\");\nvar parts = anatomy.build();\nvar getRootId = ctx => ctx.ids?.root ?? `carousel:${ctx.id}`;\nvar getItemId = (ctx, index) => ctx.ids?.item?.(index) ?? `carousel:${ctx.id}:item:${index}`;\nvar getItemGroupId = ctx => ctx.ids?.itemGroup ?? `carousel:${ctx.id}:item-group`;\nvar getNextTriggerId = ctx => ctx.ids?.nextTrigger ?? `carousel:${ctx.id}:next-trigger`;\nvar getPrevTriggerId = ctx => ctx.ids?.prevTrigger ?? `carousel:${ctx.id}:prev-trigger`;\nvar getIndicatorGroupId = ctx => ctx.ids?.indicatorGroup ?? `carousel:${ctx.id}:indicator-group`;\nvar getIndicatorId = (ctx, index) => ctx.ids?.indicator?.(index) ?? `carousel:${ctx.id}:indicator:${index}`;\nvar getItemGroupEl = ctx => ctx.getById(getItemGroupId(ctx));\nvar getItemEls = ctx => queryAll(getItemGroupEl(ctx), `[data-part=item]`);\nvar getIndicatorEl = (ctx, page) => ctx.getById(getIndicatorId(ctx, page));\nvar syncTabIndex = ctx => {\n  const el = getItemGroupEl(ctx);\n  if (!el) return;\n  const tabbables = getTabbables(el);\n  if (tabbables.length > 0) {\n    el.removeAttribute(\"tabindex\");\n  } else {\n    el.setAttribute(\"tabindex\", \"0\");\n  }\n};\n\n// src/carousel.connect.ts\nfunction connect(service, normalize) {\n  const {\n    state,\n    context,\n    computed,\n    send,\n    scope,\n    prop\n  } = service;\n  const isPlaying = state.matches(\"autoplay\");\n  const isDragging = state.matches(\"dragging\");\n  const canScrollNext = computed(\"canScrollNext\");\n  const canScrollPrev = computed(\"canScrollPrev\");\n  const horizontal = computed(\"isHorizontal\");\n  const pageSnapPoints = Array.from(context.get(\"pageSnapPoints\"));\n  const page = context.get(\"page\");\n  const slidesPerPage = prop(\"slidesPerPage\");\n  const padding = prop(\"padding\");\n  const translations = prop(\"translations\");\n  return {\n    isPlaying,\n    isDragging,\n    page,\n    pageSnapPoints,\n    canScrollNext,\n    canScrollPrev,\n    getProgress() {\n      return page / pageSnapPoints.length;\n    },\n    scrollToIndex(index, instant) {\n      send({\n        type: \"INDEX.SET\",\n        index,\n        instant\n      });\n    },\n    scrollTo(index, instant) {\n      send({\n        type: \"PAGE.SET\",\n        index,\n        instant\n      });\n    },\n    scrollNext(instant) {\n      send({\n        type: \"PAGE.NEXT\",\n        instant\n      });\n    },\n    scrollPrev(instant) {\n      send({\n        type: \"PAGE.PREV\",\n        instant\n      });\n    },\n    play() {\n      send({\n        type: \"AUTOPLAY.START\"\n      });\n    },\n    pause() {\n      send({\n        type: \"AUTOPLAY.PAUSE\"\n      });\n    },\n    isInView(index) {\n      return Array.from(context.get(\"slidesInView\")).includes(index);\n    },\n    refresh() {\n      send({\n        type: \"SNAP.REFRESH\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        role: \"region\",\n        \"aria-roledescription\": \"carousel\",\n        \"data-orientation\": prop(\"orientation\"),\n        dir: prop(\"dir\"),\n        style: {\n          \"--slides-per-page\": slidesPerPage,\n          \"--slide-spacing\": prop(\"spacing\"),\n          \"--slide-item-size\": \"calc(100% / var(--slides-per-page) - var(--slide-spacing) * (var(--slides-per-page) - 1) / var(--slides-per-page))\"\n        }\n      });\n    },\n    getItemGroupProps() {\n      return normalize.element({\n        ...parts.itemGroup.attrs,\n        id: getItemGroupId(scope),\n        \"data-orientation\": prop(\"orientation\"),\n        \"data-dragging\": dataAttr(isDragging),\n        dir: prop(\"dir\"),\n        \"aria-live\": isPlaying ? \"off\" : \"polite\",\n        onMouseDown(event) {\n          if (!prop(\"allowMouseDrag\")) return;\n          if (event.button !== 0) return;\n          if (event.defaultPrevented) return;\n          const target = getEventTarget(event);\n          if (isFocusable(target) && target !== event.currentTarget) return;\n          event.preventDefault();\n          send({\n            type: \"DRAGGING.START\"\n          });\n        },\n        onWheel: throttle(() => {\n          send({\n            type: \"USER.SCROLL\"\n          });\n        }, 150),\n        onTouchStart() {\n          send({\n            type: \"USER.SCROLL\"\n          });\n        },\n        style: {\n          display: \"grid\",\n          gap: \"var(--slide-spacing)\",\n          scrollSnapType: [horizontal ? \"x\" : \"y\", prop(\"snapType\")].join(\" \"),\n          gridAutoFlow: horizontal ? \"column\" : \"row\",\n          scrollbarWidth: \"none\",\n          overscrollBehavior: \"contain\",\n          [horizontal ? \"gridAutoColumns\" : \"gridAutoRows\"]: \"var(--slide-item-size)\",\n          [horizontal ? \"scrollPaddingInline\" : \"scrollPaddingBlock\"]: padding,\n          [horizontal ? \"paddingInline\" : \"paddingBlock\"]: padding,\n          [horizontal ? \"overflowX\" : \"overflowY\"]: \"auto\"\n        }\n      });\n    },\n    getItemProps(props2) {\n      const isInView = context.get(\"slidesInView\").includes(props2.index);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: getItemId(scope, props2.index),\n        dir: prop(\"dir\"),\n        role: \"group\",\n        \"data-index\": props2.index,\n        \"data-inview\": dataAttr(isInView),\n        \"aria-roledescription\": \"slide\",\n        \"data-orientation\": prop(\"orientation\"),\n        \"aria-label\": translations.item(props2.index, prop(\"slideCount\")),\n        \"aria-hidden\": ariaAttr(!isInView),\n        style: {\n          scrollSnapAlign: (() => {\n            const snapAlign = props2.snapAlign ?? \"start\";\n            const slidesPerMove = prop(\"slidesPerMove\");\n            const perMove = slidesPerMove === \"auto\" ? Math.floor(prop(\"slidesPerPage\")) : slidesPerMove;\n            const shouldSnap = (props2.index + perMove) % perMove === 0;\n            return shouldSnap ? snapAlign : void 0;\n          })()\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        \"data-orientation\": prop(\"orientation\")\n      });\n    },\n    getPrevTriggerProps() {\n      return normalize.button({\n        ...parts.prevTrigger.attrs,\n        id: getPrevTriggerId(scope),\n        type: \"button\",\n        disabled: !canScrollPrev,\n        dir: prop(\"dir\"),\n        \"aria-label\": translations.prevTrigger,\n        \"data-orientation\": prop(\"orientation\"),\n        \"aria-controls\": getItemGroupId(scope),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"PAGE.PREV\",\n            src: \"trigger\"\n          });\n        }\n      });\n    },\n    getNextTriggerProps() {\n      return normalize.button({\n        ...parts.nextTrigger.attrs,\n        dir: prop(\"dir\"),\n        id: getNextTriggerId(scope),\n        type: \"button\",\n        \"aria-label\": translations.nextTrigger,\n        \"data-orientation\": prop(\"orientation\"),\n        \"aria-controls\": getItemGroupId(scope),\n        disabled: !canScrollNext,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"PAGE.NEXT\",\n            src: \"trigger\"\n          });\n        }\n      });\n    },\n    getIndicatorGroupProps() {\n      return normalize.element({\n        ...parts.indicatorGroup.attrs,\n        dir: prop(\"dir\"),\n        id: getIndicatorGroupId(scope),\n        \"data-orientation\": prop(\"orientation\"),\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          const src = \"indicator\";\n          const keyMap = {\n            ArrowDown(event2) {\n              if (horizontal) return;\n              send({\n                type: \"PAGE.NEXT\",\n                src\n              });\n              event2.preventDefault();\n            },\n            ArrowUp(event2) {\n              if (horizontal) return;\n              send({\n                type: \"PAGE.PREV\",\n                src\n              });\n              event2.preventDefault();\n            },\n            ArrowRight(event2) {\n              if (!horizontal) return;\n              send({\n                type: \"PAGE.NEXT\",\n                src\n              });\n              event2.preventDefault();\n            },\n            ArrowLeft(event2) {\n              if (!horizontal) return;\n              send({\n                type: \"PAGE.PREV\",\n                src\n              });\n              event2.preventDefault();\n            },\n            Home(event2) {\n              send({\n                type: \"PAGE.SET\",\n                index: 0,\n                src\n              });\n              event2.preventDefault();\n            },\n            End(event2) {\n              send({\n                type: \"PAGE.SET\",\n                index: pageSnapPoints.length - 1,\n                src\n              });\n              event2.preventDefault();\n            }\n          };\n          const key = getEventKey(event, {\n            dir: prop(\"dir\"),\n            orientation: prop(\"orientation\")\n          });\n          const exec = keyMap[key];\n          exec?.(event);\n        }\n      });\n    },\n    getIndicatorProps(props2) {\n      return normalize.button({\n        ...parts.indicator.attrs,\n        dir: prop(\"dir\"),\n        id: getIndicatorId(scope, props2.index),\n        type: \"button\",\n        \"data-orientation\": prop(\"orientation\"),\n        \"data-index\": props2.index,\n        \"data-readonly\": dataAttr(props2.readOnly),\n        \"data-current\": dataAttr(props2.index === page),\n        \"aria-label\": translations.indicator(props2.index),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (props2.readOnly) return;\n          send({\n            type: \"PAGE.SET\",\n            index: props2.index,\n            src: \"indicator\"\n          });\n        }\n      });\n    },\n    getAutoplayTriggerProps() {\n      return normalize.button({\n        ...parts.autoplayTrigger.attrs,\n        type: \"button\",\n        \"data-orientation\": prop(\"orientation\"),\n        \"data-pressed\": dataAttr(isPlaying),\n        \"aria-label\": isPlaying ? translations.autoplayStop : translations.autoplayStart,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: isPlaying ? \"AUTOPLAY.PAUSE\" : \"AUTOPLAY.START\"\n          });\n        }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    ensureProps(props2, [\"slideCount\"], \"carousel\");\n    return {\n      dir: \"ltr\",\n      defaultPage: 0,\n      orientation: \"horizontal\",\n      snapType: \"mandatory\",\n      loop: !!props2.autoplay,\n      slidesPerPage: 1,\n      slidesPerMove: \"auto\",\n      spacing: \"0px\",\n      autoplay: false,\n      allowMouseDrag: false,\n      inViewThreshold: 0.6,\n      ...props2,\n      translations: {\n        nextTrigger: \"Next slide\",\n        prevTrigger: \"Previous slide\",\n        indicator: index => `Go to slide ${index + 1}`,\n        item: (index, count) => `${index + 1} of ${count}`,\n        autoplayStart: \"Start slide rotation\",\n        autoplayStop: \"Stop slide rotation\",\n        ...props2.translations\n      }\n    };\n  },\n  refs() {\n    return {\n      timeoutRef: void 0\n    };\n  },\n  initialState({\n    prop\n  }) {\n    return prop(\"autoplay\") ? \"autoplay\" : \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      page: bindable(() => ({\n        defaultValue: prop(\"defaultPage\"),\n        value: prop(\"page\"),\n        onChange(page) {\n          const ctx = getContext();\n          const pageSnapPoints = ctx.get(\"pageSnapPoints\");\n          prop(\"onPageChange\")?.({\n            page,\n            pageSnapPoint: pageSnapPoints[page]\n          });\n        }\n      })),\n      pageSnapPoints: bindable(() => {\n        return {\n          defaultValue: getPageSnapPoints(prop(\"slideCount\"), prop(\"slidesPerMove\"), prop(\"slidesPerPage\"))\n        };\n      }),\n      slidesInView: bindable(() => ({\n        defaultValue: []\n      }))\n    };\n  },\n  computed: {\n    isRtl: ({\n      prop\n    }) => prop(\"dir\") === \"rtl\",\n    isHorizontal: ({\n      prop\n    }) => prop(\"orientation\") === \"horizontal\",\n    canScrollNext: ({\n      prop,\n      context\n    }) => prop(\"loop\") || context.get(\"page\") < context.get(\"pageSnapPoints\").length - 1,\n    canScrollPrev: ({\n      prop,\n      context\n    }) => prop(\"loop\") || context.get(\"page\") > 0,\n    autoplayInterval: ({\n      prop\n    }) => {\n      const autoplay = prop(\"autoplay\");\n      return isObject(autoplay) ? autoplay.delay : 4e3;\n    }\n  },\n  watch({\n    track,\n    action,\n    context,\n    prop\n  }) {\n    track([() => prop(\"slidesPerPage\"), () => prop(\"slidesPerMove\")], () => {\n      action([\"setSnapPoints\"]);\n    });\n    track([() => context.get(\"page\")], () => {\n      action([\"scrollToPage\", \"focusIndicatorEl\"]);\n    });\n    track([() => prop(\"orientation\")], () => {\n      action([\"setSnapPoints\", \"scrollToPage\"]);\n    });\n  },\n  on: {\n    \"PAGE.NEXT\": {\n      target: \"idle\",\n      actions: [\"clearScrollEndTimer\", \"setNextPage\"]\n    },\n    \"PAGE.PREV\": {\n      target: \"idle\",\n      actions: [\"clearScrollEndTimer\", \"setPrevPage\"]\n    },\n    \"PAGE.SET\": {\n      target: \"idle\",\n      actions: [\"clearScrollEndTimer\", \"setPage\"]\n    },\n    \"INDEX.SET\": {\n      target: \"idle\",\n      actions: [\"clearScrollEndTimer\", \"setMatchingPage\"]\n    },\n    \"SNAP.REFRESH\": {\n      actions: [\"setSnapPoints\", \"clampPage\"]\n    },\n    \"PAGE.SCROLL\": {\n      actions: [\"scrollToPage\"]\n    }\n  },\n  effects: [\"trackSlideMutation\", \"trackSlideIntersections\", \"trackSlideResize\"],\n  entry: [\"setSnapPoints\", \"setPage\"],\n  exit: [\"clearScrollEndTimer\"],\n  states: {\n    idle: {\n      on: {\n        \"DRAGGING.START\": {\n          target: \"dragging\",\n          actions: [\"invokeDragStart\"]\n        },\n        \"AUTOPLAY.START\": {\n          target: \"autoplay\",\n          actions: [\"invokeAutoplayStart\"]\n        },\n        \"USER.SCROLL\": {\n          target: \"userScroll\"\n        }\n      }\n    },\n    dragging: {\n      effects: [\"trackPointerMove\"],\n      entry: [\"disableScrollSnap\"],\n      on: {\n        DRAGGING: {\n          actions: [\"scrollSlides\", \"invokeDragging\"]\n        },\n        \"DRAGGING.END\": {\n          target: \"idle\",\n          actions: [\"endDragging\", \"invokeDraggingEnd\"]\n        }\n      }\n    },\n    userScroll: {\n      effects: [\"trackScroll\"],\n      on: {\n        \"SCROLL.END\": {\n          target: \"idle\",\n          actions: [\"setClosestPage\"]\n        }\n      }\n    },\n    autoplay: {\n      effects: [\"trackDocumentVisibility\", \"trackScroll\", \"autoUpdateSlide\"],\n      exit: [\"invokeAutoplayEnd\"],\n      on: {\n        \"AUTOPLAY.TICK\": {\n          actions: [\"setNextPage\", \"invokeAutoplay\"]\n        },\n        \"DRAGGING.START\": {\n          target: \"dragging\",\n          actions: [\"invokeDragStart\"]\n        },\n        \"AUTOPLAY.PAUSE\": {\n          target: \"idle\"\n        }\n      }\n    }\n  },\n  implementations: {\n    effects: {\n      autoUpdateSlide({\n        computed,\n        send\n      }) {\n        const id = setInterval(() => {\n          send({\n            type: \"AUTOPLAY.TICK\",\n            src: \"autoplay.interval\"\n          });\n        }, computed(\"autoplayInterval\"));\n        return () => clearInterval(id);\n      },\n      trackSlideMutation({\n        scope,\n        send\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const win = scope.getWin();\n        const observer = new win.MutationObserver(() => {\n          send({\n            type: \"SNAP.REFRESH\",\n            src: \"slide.mutation\"\n          });\n          syncTabIndex(scope);\n        });\n        syncTabIndex(scope);\n        observer.observe(el, {\n          childList: true,\n          subtree: true\n        });\n        return () => observer.disconnect();\n      },\n      trackSlideResize({\n        scope,\n        send\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const win = scope.getWin();\n        const exec = () => {\n          send({\n            type: \"SNAP.REFRESH\",\n            src: \"slide.resize\"\n          });\n        };\n        raf(() => {\n          exec();\n          raf(() => {\n            send({\n              type: \"PAGE.SCROLL\",\n              instant: true\n            });\n          });\n        });\n        const observer = new win.ResizeObserver(exec);\n        getItemEls(scope).forEach(slide => observer.observe(slide));\n        return () => observer.disconnect();\n      },\n      trackSlideIntersections({\n        scope,\n        prop,\n        context\n      }) {\n        const el = getItemGroupEl(scope);\n        const win = scope.getWin();\n        const observer = new win.IntersectionObserver(entries => {\n          const slidesInView = entries.reduce((acc, entry) => {\n            const target = entry.target;\n            const index = Number(target.dataset.index ?? \"-1\");\n            if (index == null || Number.isNaN(index) || index === -1) return acc;\n            return entry.isIntersecting ? add(acc, index) : remove(acc, index);\n          }, context.get(\"slidesInView\"));\n          context.set(\"slidesInView\", uniq(slidesInView));\n        }, {\n          root: el,\n          threshold: prop(\"inViewThreshold\")\n        });\n        getItemEls(scope).forEach(slide => observer.observe(slide));\n        return () => observer.disconnect();\n      },\n      trackScroll({\n        send,\n        refs,\n        scope\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const onScroll = () => {\n          clearTimeout(refs.get(\"timeoutRef\"));\n          refs.set(\"timeoutRef\", void 0);\n          refs.set(\"timeoutRef\", setTimeout(() => {\n            send({\n              type: \"SCROLL.END\"\n            });\n          }, 150));\n        };\n        return addDomEvent(el, \"scroll\", onScroll, {\n          passive: true\n        });\n      },\n      trackDocumentVisibility({\n        scope,\n        send\n      }) {\n        const doc = scope.getDoc();\n        const onVisibilityChange = () => {\n          if (doc.visibilityState === \"visible\") return;\n          send({\n            type: \"AUTOPLAY.PAUSE\",\n            src: \"doc.hidden\"\n          });\n        };\n        return addDomEvent(doc, \"visibilitychange\", onVisibilityChange);\n      },\n      trackPointerMove({\n        scope,\n        send\n      }) {\n        const doc = scope.getDoc();\n        return trackPointerMove(doc, {\n          onPointerMove({\n            event\n          }) {\n            send({\n              type: \"DRAGGING\",\n              left: -event.movementX,\n              top: -event.movementY\n            });\n          },\n          onPointerUp() {\n            send({\n              type: \"DRAGGING.END\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      clearScrollEndTimer({\n        refs\n      }) {\n        if (refs.get(\"timeoutRef\") == null) return;\n        clearTimeout(refs.get(\"timeoutRef\"));\n        refs.set(\"timeoutRef\", void 0);\n      },\n      scrollToPage({\n        context,\n        event,\n        scope,\n        computed\n      }) {\n        const behavior = event.instant ? \"instant\" : \"smooth\";\n        const index = clampValue(event.index ?? context.get(\"page\"), 0, context.get(\"pageSnapPoints\").length - 1);\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const axis = computed(\"isHorizontal\") ? \"left\" : \"top\";\n        el.scrollTo({\n          [axis]: context.get(\"pageSnapPoints\")[index],\n          behavior\n        });\n      },\n      setClosestPage({\n        context,\n        scope,\n        computed\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const scrollPosition = computed(\"isHorizontal\") ? el.scrollLeft : el.scrollTop;\n        const page = context.get(\"pageSnapPoints\").findIndex(point => Math.abs(point - scrollPosition) < 1);\n        if (page === -1) return;\n        context.set(\"page\", page);\n      },\n      setNextPage({\n        context,\n        prop,\n        state\n      }) {\n        const loop = state.matches(\"autoplay\") || prop(\"loop\");\n        const page = nextIndex(context.get(\"pageSnapPoints\"), context.get(\"page\"), {\n          loop\n        });\n        context.set(\"page\", page);\n      },\n      setPrevPage({\n        context,\n        prop,\n        state\n      }) {\n        const loop = state.matches(\"autoplay\") || prop(\"loop\");\n        const page = prevIndex(context.get(\"pageSnapPoints\"), context.get(\"page\"), {\n          loop\n        });\n        context.set(\"page\", page);\n      },\n      setMatchingPage({\n        context,\n        event,\n        computed,\n        scope\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const snapPoint = findSnapPoint(el, computed(\"isHorizontal\") ? \"x\" : \"y\", node => node.dataset.index === event.index.toString());\n        if (snapPoint == null) return;\n        const page = context.get(\"pageSnapPoints\").findIndex(point => Math.abs(point - snapPoint) < 1);\n        context.set(\"page\", page);\n      },\n      setPage({\n        context,\n        event\n      }) {\n        const page = event.index ?? context.get(\"page\");\n        context.set(\"page\", page);\n      },\n      clampPage({\n        context\n      }) {\n        const index = clampValue(context.get(\"page\"), 0, context.get(\"pageSnapPoints\").length - 1);\n        context.set(\"page\", index);\n      },\n      setSnapPoints({\n        context,\n        computed,\n        scope\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const scrollSnapPoints = getScrollSnapPositions(el);\n        context.set(\"pageSnapPoints\", computed(\"isHorizontal\") ? scrollSnapPoints.x : scrollSnapPoints.y);\n      },\n      disableScrollSnap({\n        scope\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const styles = getComputedStyle(el);\n        el.dataset.scrollSnapType = styles.getPropertyValue(\"scroll-snap-type\");\n        el.style.setProperty(\"scroll-snap-type\", \"none\");\n      },\n      scrollSlides({\n        scope,\n        event\n      }) {\n        const el = getItemGroupEl(scope);\n        el?.scrollBy({\n          left: event.left,\n          top: event.top,\n          behavior: \"instant\"\n        });\n      },\n      endDragging({\n        scope,\n        context,\n        computed\n      }) {\n        const el = getItemGroupEl(scope);\n        if (!el) return;\n        const startX = el.scrollLeft;\n        const startY = el.scrollTop;\n        const snapPositions = getScrollSnapPositions(el);\n        const closestX = snapPositions.x.reduce((closest, curr) => {\n          return Math.abs(curr - startX) < Math.abs(closest - startX) ? curr : closest;\n        }, snapPositions.x[0]);\n        const closestY = snapPositions.y.reduce((closest, curr) => {\n          return Math.abs(curr - startY) < Math.abs(closest - startY) ? curr : closest;\n        }, snapPositions.y[0]);\n        raf(() => {\n          el.scrollTo({\n            left: closestX,\n            top: closestY,\n            behavior: \"smooth\"\n          });\n          const closest = computed(\"isHorizontal\") ? closestX : closestY;\n          context.set(\"page\", context.get(\"pageSnapPoints\").indexOf(closest));\n          const scrollSnapType = el.dataset.scrollSnapType;\n          if (scrollSnapType) {\n            el.style.removeProperty(\"scroll-snap-type\");\n            delete el.dataset.scrollSnapType;\n          }\n        });\n      },\n      focusIndicatorEl({\n        context,\n        event,\n        scope\n      }) {\n        if (event.src !== \"indicator\") return;\n        const el = getIndicatorEl(scope, context.get(\"page\"));\n        if (!el) return;\n        raf(() => el.focus({\n          preventScroll: true\n        }));\n      },\n      invokeDragStart({\n        context,\n        prop\n      }) {\n        prop(\"onDragStatusChange\")?.({\n          type: \"dragging.start\",\n          isDragging: true,\n          page: context.get(\"page\")\n        });\n      },\n      invokeDragging({\n        context,\n        prop\n      }) {\n        prop(\"onDragStatusChange\")?.({\n          type: \"dragging\",\n          isDragging: true,\n          page: context.get(\"page\")\n        });\n      },\n      invokeDraggingEnd({\n        context,\n        prop\n      }) {\n        prop(\"onDragStatusChange\")?.({\n          type: \"dragging.end\",\n          isDragging: false,\n          page: context.get(\"page\")\n        });\n      },\n      invokeAutoplay({\n        context,\n        prop\n      }) {\n        prop(\"onAutoplayStatusChange\")?.({\n          type: \"autoplay\",\n          isPlaying: true,\n          page: context.get(\"page\")\n        });\n      },\n      invokeAutoplayStart({\n        context,\n        prop\n      }) {\n        prop(\"onAutoplayStatusChange\")?.({\n          type: \"autoplay.start\",\n          isPlaying: true,\n          page: context.get(\"page\")\n        });\n      },\n      invokeAutoplayEnd({\n        context,\n        prop\n      }) {\n        prop(\"onAutoplayStatusChange\")?.({\n          type: \"autoplay.stop\",\n          isPlaying: false,\n          page: context.get(\"page\")\n        });\n      }\n    }\n  }\n});\nfunction getPageSnapPoints(totalSlides, slidesPerMove, slidesPerPage) {\n  if (totalSlides == null) return [];\n  const snapPoints = [];\n  const perMove = slidesPerMove === \"auto\" ? Math.floor(slidesPerPage) : slidesPerMove;\n  for (let i = 0; i < totalSlides - 1; i += perMove) snapPoints.push(i);\n  return snapPoints;\n}\nvar props = createProps()([\"dir\", \"getRootNode\", \"id\", \"ids\", \"loop\", \"page\", \"defaultPage\", \"onPageChange\", \"orientation\", \"slideCount\", \"slidesPerPage\", \"slidesPerMove\", \"spacing\", \"padding\", \"autoplay\", \"allowMouseDrag\", \"inViewThreshold\", \"translations\", \"snapType\", \"onDragStatusChange\", \"onAutoplayStatusChange\"]);\nvar splitProps = createSplitProps(props);\nvar indicatorProps = createProps()([\"index\", \"readOnly\"]);\nvar splitIndicatorProps = createSplitProps(indicatorProps);\nvar itemProps = createProps()([\"index\", \"snapAlign\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, indicatorProps, itemProps, machine, props, splitIndicatorProps, splitItemProps, splitProps };","map":null,"metadata":{},"sourceType":"module"}