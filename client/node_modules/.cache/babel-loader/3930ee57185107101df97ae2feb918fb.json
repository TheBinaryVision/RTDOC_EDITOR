{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useMachine, normalizeProps, mergeProps } from '@zag-js/react';\nimport * as toast from '@zag-js/toast';\nimport { forwardRef, useId } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { ark } from '../factory.js';\nimport { ToastProvider } from './use-toast-context.js';\nconst Toaster = forwardRef((props, ref) => {\n  const {\n    toaster,\n    children,\n    ...localProps\n  } = props;\n  const locale = useLocaleContext();\n  const env = useEnvironmentContext();\n  const service = useMachine(toast.group.machine, {\n    store: toaster,\n    id: useId(),\n    dir: locale?.dir,\n    getRootNode: env?.getRootNode\n  });\n  const api = toast.group.connect(service, normalizeProps);\n  const mergedProps = mergeProps(api.getGroupProps(), localProps);\n  return /* @__PURE__ */jsx(ark.div, {\n    ...mergedProps,\n    ref,\n    children: api.getToasts().map((toast2, index) => /* @__PURE__ */jsx(ToastActor, {\n      value: toast2,\n      parent: service,\n      index,\n      children: ctx => children(ctx)\n    }, toast2.id))\n  });\n});\nToaster.displayName = \"Toaster\";\nconst ToastActor = props => {\n  const localProps = {\n    ...props.value,\n    parent: props.parent,\n    index: props.index\n  };\n  const service = useMachine(toast.machine, {\n    ...localProps\n  });\n  const api = toast.connect(service, normalizeProps);\n  return /* @__PURE__ */jsx(ToastProvider, {\n    value: api,\n    children: props.children(props.value)\n  });\n};\nToastActor.displayName = \"ToastActor\";\nexport { Toaster };","map":null,"metadata":{},"sourceType":"module"}