{"ast":null,"code":"\"use client\";\n\nimport { createScope, MachineStatus, INIT_STATE } from '@zag-js/core';\nexport { mergeProps } from '@zag-js/core';\nimport { compact, ensure, isFunction, warn, toArray, isString, identity } from '@zag-js/utils';\nimport * as React from 'react';\nimport { useMemo, useRef, useLayoutEffect, useEffect, useState } from 'react';\nimport { flushSync, createPortal } from 'react-dom';\nimport { createNormalizer } from '@zag-js/types';\nimport { jsx } from 'react/jsx-runtime';\n\n// src/index.ts\nvar useSafeLayoutEffect = typeof globalThis.document !== \"undefined\" ? useLayoutEffect : useEffect;\n\n// src/bindable.ts\nfunction useBindable(props) {\n  const initial = props().value ?? props().defaultValue;\n  const eq = props().isEqual ?? Object.is;\n  const [initialValue] = useState(initial);\n  const [value, setValue] = useState(initialValue);\n  const controlled = props().value !== void 0;\n  const valueRef = useRef(value);\n  valueRef.current = controlled ? props().value : value;\n  const prevValue = useRef(valueRef.current);\n  useSafeLayoutEffect(() => {\n    prevValue.current = valueRef.current;\n  }, [value, props().value]);\n  const setFn = value2 => {\n    const prev = prevValue.current;\n    const next = isFunction(value2) ? value2(prev) : value2;\n    if (props().debug) {\n      console.log(`[bindable > ${props().debug}] setValue`, {\n        next,\n        prev\n      });\n    }\n    if (!controlled) setValue(next);\n    if (!eq(next, prev)) {\n      props().onChange?.(next, prev);\n    }\n  };\n  function get() {\n    return controlled ? props().value : value;\n  }\n  return {\n    initial: initialValue,\n    ref: valueRef,\n    get,\n    set(value2) {\n      const exec = props().sync ? flushSync : identity;\n      exec(() => setFn(value2));\n    },\n    invoke(nextValue, prevValue2) {\n      props().onChange?.(nextValue, prevValue2);\n    },\n    hash(value2) {\n      return props().hash?.(value2) ?? String(value2);\n    }\n  };\n}\nuseBindable.cleanup = fn => {\n  useEffect(() => fn, []);\n};\nuseBindable.ref = defaultValue => {\n  const value = useRef(defaultValue);\n  return {\n    get: () => value.current,\n    set: next => {\n      value.current = next;\n    }\n  };\n};\nfunction useRefs(refs) {\n  const ref = useRef(refs);\n  return {\n    get(key) {\n      return ref.current[key];\n    },\n    set(key, value) {\n      ref.current[key] = value;\n    }\n  };\n}\nvar useTrack = (deps, effect) => {\n  const render = useRef(false);\n  const called = useRef(false);\n  useEffect(() => {\n    const mounted = render.current;\n    const run = mounted && called.current;\n    if (run) return effect();\n    called.current = true;\n  }, [...(deps ?? []).map(d => typeof d === \"function\" ? d() : d)]);\n  useEffect(() => {\n    render.current = true;\n    return () => {\n      render.current = false;\n    };\n  }, []);\n};\n\n// src/machine.ts\nfunction useMachine(machine, userProps = {}) {\n  const scope = useMemo(() => {\n    const {\n      id,\n      ids,\n      getRootNode\n    } = userProps;\n    return createScope({\n      id,\n      ids,\n      getRootNode\n    });\n  }, [userProps]);\n  const debug = (...args) => {\n    if (machine.debug) console.log(...args);\n  };\n  const props = machine.props?.({\n    props: compact(userProps),\n    scope\n  }) ?? userProps;\n  const prop = useProp(props);\n  const context = machine.context?.({\n    prop,\n    bindable: useBindable,\n    scope,\n    flush,\n    getContext() {\n      return ctx;\n    },\n    getComputed() {\n      return computed;\n    },\n    getRefs() {\n      return refs;\n    }\n  });\n  const contextRef = useLiveRef(context);\n  const ctx = {\n    get(key) {\n      return contextRef.current?.[key].ref.current;\n    },\n    set(key, value) {\n      contextRef.current?.[key].set(value);\n    },\n    initial(key) {\n      return contextRef.current?.[key].initial;\n    },\n    hash(key) {\n      const current = contextRef.current?.[key].get();\n      return contextRef.current?.[key].hash(current);\n    }\n  };\n  const effects = useRef(/* @__PURE__ */new Map());\n  const transitionRef = useRef(null);\n  const previousEventRef = useRef(null);\n  const eventRef = useRef({\n    type: \"\"\n  });\n  const getEvent = () => ({\n    ...eventRef.current,\n    current() {\n      return eventRef.current;\n    },\n    previous() {\n      return previousEventRef.current;\n    }\n  });\n  const getState = () => ({\n    ...state,\n    matches(...values) {\n      return values.includes(state.ref.current);\n    },\n    hasTag(tag) {\n      return !!machine.states[state.ref.current]?.tags?.includes(tag);\n    }\n  });\n  const refs = useRefs(machine.refs?.({\n    prop,\n    context: ctx\n  }) ?? {});\n  const getParams = () => ({\n    state: getState(),\n    context: ctx,\n    event: getEvent(),\n    prop,\n    send,\n    action,\n    guard,\n    track: useTrack,\n    refs,\n    computed,\n    flush,\n    scope,\n    choose\n  });\n  const action = keys => {\n    const strs = isFunction(keys) ? keys(getParams()) : keys;\n    if (!strs) return;\n    const fns = strs.map(s => {\n      const fn = machine.implementations?.actions?.[s];\n      if (!fn) warn(`[zag-js] No implementation found for action \"${JSON.stringify(s)}\"`);\n      return fn;\n    });\n    for (const fn of fns) {\n      fn?.(getParams());\n    }\n  };\n  const guard = str => {\n    if (isFunction(str)) return str(getParams());\n    return machine.implementations?.guards?.[str](getParams());\n  };\n  const effect = keys => {\n    const strs = isFunction(keys) ? keys(getParams()) : keys;\n    if (!strs) return;\n    const fns = strs.map(s => {\n      const fn = machine.implementations?.effects?.[s];\n      if (!fn) warn(`[zag-js] No implementation found for effect \"${JSON.stringify(s)}\"`);\n      return fn;\n    });\n    const cleanups = [];\n    for (const fn of fns) {\n      const cleanup = fn?.(getParams());\n      if (cleanup) cleanups.push(cleanup);\n    }\n    return () => cleanups.forEach(fn => fn?.());\n  };\n  const choose = transitions => {\n    return toArray(transitions).find(t => {\n      let result = !t.guard;\n      if (isString(t.guard)) result = !!guard(t.guard);else if (isFunction(t.guard)) result = t.guard(getParams());\n      return result;\n    });\n  };\n  const computed = key => {\n    ensure(machine.computed, () => `[zag-js] No computed object found on machine`);\n    const fn = machine.computed[key];\n    return fn({\n      context: ctx,\n      event: getEvent(),\n      prop,\n      refs,\n      scope,\n      computed\n    });\n  };\n  const state = useBindable(() => ({\n    defaultValue: machine.initialState({\n      prop\n    }),\n    onChange(nextState, prevState) {\n      if (prevState) {\n        const exitEffects = effects.current.get(prevState);\n        exitEffects?.();\n        effects.current.delete(prevState);\n      }\n      if (prevState) {\n        action(machine.states[prevState]?.exit);\n      }\n      action(transitionRef.current?.actions);\n      const cleanup = effect(machine.states[nextState]?.effects);\n      if (cleanup) effects.current.set(nextState, cleanup);\n      if (prevState === INIT_STATE) {\n        action(machine.entry);\n        const cleanup2 = effect(machine.effects);\n        if (cleanup2) effects.current.set(INIT_STATE, cleanup2);\n      }\n      action(machine.states[nextState]?.entry);\n    }\n  }));\n  const hydratedStateRef = useRef(void 0);\n  const statusRef = useRef(MachineStatus.NotStarted);\n  useSafeLayoutEffect(() => {\n    queueMicrotask(() => {\n      const started = statusRef.current === MachineStatus.Started;\n      statusRef.current = MachineStatus.Started;\n      debug(started ? \"rehydrating...\" : \"initializing...\");\n      const initialState = hydratedStateRef.current ?? state.initial;\n      state.invoke(initialState, started ? state.get() : INIT_STATE);\n    });\n    const fns = effects.current;\n    const currentState = state.ref.current;\n    return () => {\n      debug(\"unmounting...\");\n      hydratedStateRef.current = currentState;\n      statusRef.current = MachineStatus.Stopped;\n      fns.forEach(fn => fn?.());\n      effects.current = /* @__PURE__ */new Map();\n      transitionRef.current = null;\n      queueMicrotask(() => {\n        action(machine.exit);\n      });\n    };\n  }, []);\n  const getCurrentState = () => {\n    if (\"ref\" in state) return state.ref.current;\n    return state.get();\n  };\n  const send = event => {\n    queueMicrotask(() => {\n      if (statusRef.current !== MachineStatus.Started) return;\n      previousEventRef.current = eventRef.current;\n      eventRef.current = event;\n      debug(\"send\", event);\n      let currentState = getCurrentState();\n      const transitions =\n      // @ts-ignore\n      machine.states[currentState].on?.[event.type] ??\n      // @ts-ignore\n      machine.on?.[event.type];\n      const transition = choose(transitions);\n      if (!transition) return;\n      transitionRef.current = transition;\n      const target = transition.target ?? currentState;\n      debug(\"transition\", transition);\n      const changed = target !== currentState;\n      if (changed) {\n        flushSync(() => state.set(target));\n      } else if (transition.reenter && !changed) {\n        state.invoke(currentState, currentState);\n      } else {\n        action(transition.actions ?? []);\n      }\n    });\n  };\n  machine.watch?.(getParams());\n  return {\n    state: getState(),\n    send,\n    context: ctx,\n    prop,\n    scope,\n    refs,\n    computed,\n    event: getEvent(),\n    getStatus: () => statusRef.current\n  };\n}\nfunction useLiveRef(value) {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n}\nfunction useProp(value) {\n  const ref = useLiveRef(value);\n  return function get(key) {\n    return ref.current[key];\n  };\n}\nfunction flush(fn) {\n  queueMicrotask(() => {\n    flushSync(() => fn());\n  });\n}\nvar normalizeProps = createNormalizer(v => v);\nvar Portal = props => {\n  const {\n    children,\n    container,\n    disabled,\n    getRootNode\n  } = props;\n  const isServer = typeof window === \"undefined\";\n  if (isServer || disabled) return /* @__PURE__ */jsx(React.Fragment, {\n    children\n  });\n  const doc = getRootNode?.().ownerDocument ?? document;\n  const mountNode = container?.current ?? doc.body;\n  return /* @__PURE__ */jsx(React.Fragment, {\n    children: React.Children.map(children, child => createPortal(child, mountNode))\n  });\n};\nexport { Portal, normalizeProps, useMachine };","map":null,"metadata":{},"sourceType":"module"}