{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { dataAttr } from '@zag-js/dom-query';\nimport { isValueWithinRange, createSplitProps, fromLength } from '@zag-js/utils';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/steps.anatomy.ts\nvar anatomy = createAnatomy(\"steps\").parts(\"root\", \"list\", \"item\", \"trigger\", \"indicator\", \"separator\", \"content\", \"nextTrigger\", \"prevTrigger\", \"progress\");\nvar parts = anatomy.build();\n\n// src/steps.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `steps:${ctx.id}`;\nvar getListId = ctx => ctx.ids?.list ?? `steps:${ctx.id}:list`;\nvar getTriggerId = (ctx, index) => ctx.ids?.triggerId?.(index) ?? `steps:${ctx.id}:trigger:${index}`;\nvar getContentId = (ctx, index) => ctx.ids?.contentId?.(index) ?? `steps:${ctx.id}:content:${index}`;\n\n// src/steps.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    send,\n    computed,\n    prop,\n    scope\n  } = service;\n  const step = context.get(\"step\");\n  const count = prop(\"count\");\n  const percent = computed(\"percent\");\n  const hasNextStep = computed(\"hasNextStep\");\n  const hasPrevStep = computed(\"hasPrevStep\");\n  const getItemState = props2 => ({\n    triggerId: getTriggerId(scope, props2.index),\n    contentId: getContentId(scope, props2.index),\n    current: props2.index === step,\n    completed: props2.index < step,\n    incomplete: props2.index > step,\n    index: props2.index,\n    first: props2.index === 0,\n    last: props2.index === count - 1\n  });\n  const goToNextStep = () => {\n    send({\n      type: \"STEP.NEXT\",\n      src: \"next.trigger.click\"\n    });\n  };\n  const goToPrevStep = () => {\n    send({\n      type: \"STEP.PREV\",\n      src: \"prev.trigger.click\"\n    });\n  };\n  const resetStep = () => {\n    send({\n      type: \"STEP.RESET\",\n      src: \"reset.trigger.click\"\n    });\n  };\n  const setStep = value => {\n    send({\n      type: \"STEP.SET\",\n      value,\n      src: \"api.setValue\"\n    });\n  };\n  return {\n    value: step,\n    count,\n    percent,\n    hasNextStep,\n    hasPrevStep,\n    isCompleted: computed(\"completed\"),\n    goToNextStep,\n    goToPrevStep,\n    resetStep,\n    getItemState,\n    setStep,\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\"),\n        \"data-orientation\": prop(\"orientation\"),\n        style: {\n          \"--percent\": `${percent}%`\n        }\n      });\n    },\n    getListProps() {\n      const arr = fromLength(count);\n      const triggerIds = arr.map((_, index) => getTriggerId(scope, index));\n      return normalize.element({\n        ...parts.list.attrs,\n        dir: prop(\"dir\"),\n        id: getListId(scope),\n        role: \"tablist\",\n        \"aria-owns\": triggerIds.join(\" \"),\n        \"aria-orientation\": prop(\"orientation\"),\n        \"data-orientation\": prop(\"orientation\")\n      });\n    },\n    getItemProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: prop(\"dir\"),\n        \"aria-current\": itemState.current ? \"step\" : void 0,\n        \"data-orientation\": prop(\"orientation\")\n      });\n    },\n    getTriggerProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: itemState.triggerId,\n        role: \"tab\",\n        dir: prop(\"dir\"),\n        tabIndex: !prop(\"linear\") || itemState.current ? 0 : -1,\n        \"aria-selected\": itemState.current,\n        \"aria-controls\": itemState.contentId,\n        \"data-state\": itemState.current ? \"open\" : \"closed\",\n        \"data-orientation\": prop(\"orientation\"),\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (prop(\"linear\")) return;\n          send({\n            type: \"STEP.SET\",\n            value: props2.index,\n            src: \"trigger.click\"\n          });\n        }\n      });\n    },\n    getContentProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: prop(\"dir\"),\n        id: itemState.contentId,\n        role: \"tabpanel\",\n        tabIndex: 0,\n        hidden: !itemState.current,\n        \"data-state\": itemState.current ? \"open\" : \"closed\",\n        \"data-orientation\": prop(\"orientation\"),\n        \"aria-labelledby\": itemState.triggerId\n      });\n    },\n    getIndicatorProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.indicator.attrs,\n        dir: prop(\"dir\"),\n        \"aria-hidden\": true,\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete)\n      });\n    },\n    getSeparatorProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.separator.attrs,\n        dir: prop(\"dir\"),\n        \"data-orientation\": prop(\"orientation\"),\n        \"data-complete\": dataAttr(itemState.completed),\n        \"data-current\": dataAttr(itemState.current),\n        \"data-incomplete\": dataAttr(itemState.incomplete)\n      });\n    },\n    getNextTriggerProps() {\n      return normalize.button({\n        ...parts.nextTrigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        disabled: !hasNextStep,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          goToNextStep();\n        }\n      });\n    },\n    getPrevTriggerProps() {\n      return normalize.button({\n        dir: prop(\"dir\"),\n        ...parts.prevTrigger.attrs,\n        type: \"button\",\n        disabled: !hasPrevStep,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          goToPrevStep();\n        }\n      });\n    },\n    getProgressProps() {\n      return normalize.element({\n        dir: prop(\"dir\"),\n        ...parts.progress.attrs,\n        role: \"progressbar\",\n        \"aria-valuenow\": percent,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuetext\": `${percent}% complete`,\n        \"data-complete\": dataAttr(percent === 100)\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      defaultStep: 0,\n      count: 1,\n      linear: false,\n      orientation: \"horizontal\",\n      ...props2\n    };\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      step: bindable(() => ({\n        defaultValue: prop(\"defaultStep\"),\n        value: prop(\"step\"),\n        onChange(value) {\n          prop(\"onStepChange\")?.({\n            step: value\n          });\n          const completed = value == prop(\"count\");\n          if (completed) prop(\"onStepComplete\")?.();\n        }\n      }))\n    };\n  },\n  computed: {\n    percent: ({\n      context,\n      prop\n    }) => context.get(\"step\") / prop(\"count\") * 100,\n    hasNextStep: ({\n      context,\n      prop\n    }) => context.get(\"step\") < prop(\"count\"),\n    hasPrevStep: ({\n      context\n    }) => context.get(\"step\") > 0,\n    completed: ({\n      context,\n      prop\n    }) => context.get(\"step\") === prop(\"count\")\n  },\n  initialState() {\n    return \"idle\";\n  },\n  entry: [\"validateStep\"],\n  states: {\n    idle: {\n      on: {\n        \"STEP.SET\": {\n          actions: [\"setStep\"]\n        },\n        \"STEP.NEXT\": {\n          actions: [\"goToNextStep\"]\n        },\n        \"STEP.PREV\": {\n          actions: [\"goToPrevStep\"]\n        },\n        \"STEP.RESET\": {\n          actions: [\"resetStep\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      goToNextStep({\n        context,\n        prop\n      }) {\n        const value = Math.min(context.get(\"step\") + 1, prop(\"count\"));\n        context.set(\"step\", value);\n      },\n      goToPrevStep({\n        context\n      }) {\n        const value = Math.max(context.get(\"step\") - 1, 0);\n        context.set(\"step\", value);\n      },\n      resetStep({\n        context\n      }) {\n        context.set(\"step\", 0);\n      },\n      setStep({\n        context,\n        event\n      }) {\n        context.set(\"step\", event.value);\n      },\n      validateStep({\n        context,\n        prop\n      }) {\n        validateStep(prop(\"count\"), context.get(\"step\"));\n      }\n    }\n  }\n});\nvar validateStep = (count, step) => {\n  if (!isValueWithinRange(step, 0, count)) {\n    throw new RangeError(`[zag-js/steps] step index ${step} is out of bounds`);\n  }\n};\nvar props = createProps()([\"count\", \"dir\", \"getRootNode\", \"id\", \"ids\", \"linear\", \"onStepChange\", \"onStepComplete\", \"orientation\", \"step\", \"defaultStep\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module"}